import org.jetbrains.kotlin.konan.properties.Properties
import org.jetbrains.kotlin.konan.properties.loadProperties

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.3.41"

    // Apply the application plugin to add support for building a CLI application.
    application
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    maven("https://maven.pkg.github.com/rramesh/rrproto") {
        credentials {
            username = GithubPackage.user()
            password = GithubPackage.key()
        }
    }
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    implementation("com.rr", "proto", "1.0.1-p01")

    compile("org.jetbrains.kotlinx", "kotlinx-coroutines-core", "1.3.2")
    // netty to run gRPC
    compile("io.grpc", "grpc-netty-shaded", "1.25.0")
    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
}

application {
    // Define the main class for the application
    mainClassName = "com.rr.authadi.client.AppKt"
}

tasks.withType<Jar> {
    manifest {
        attributes("Main-Class" to "com.rr.authadi.client.AppKt")
    }

    from(configurations.compileClasspath.get().map { if (it.isDirectory()) it else zipTree(it) })
}

object GithubPackage {
    private val ghProperties by lazy { load() }
    private fun load() : Properties{
        return try {
            loadProperties(".protopkg.properties")
        } catch (ex: Exception) {
            val sysP = Properties()
            val ghUser = System.getProperty("github.user") ?: ""
            val ghPassword = System.getProperty("github.key") ?: ""
            sysP.setProperty("github.user", ghUser)
            sysP.setProperty("github.key", ghPassword)
            sysP
        }
    }
    fun user() : String? {
        return ghProperties.getProperty("github.user")
    }

    fun key() : String? {
        return ghProperties.getProperty("github.key")
    }
}
